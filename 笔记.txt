1.assets的icon.styl还是按自己的弄，其它的可以模仿

2.做东西时要明确区分 dev 和 prod 的依赖包
    npm i --save-dev  <packname>  
        工程构建（开发时、“打包”时）依赖 ；例：xxx-cli , less-loader , babel-loader...

    npm i --save <packname> 
        项目（运行时、发布到生产环境时）依赖；例：antd,element,vue,react...

    关于如何区分 dev 和 prod 的依赖包

    例如，你写了一个 proxy的插件，依赖了 request模块，这个时候，发布以后如果
    别人使用必须同时安装 request 模块，这个就是 dependencies

    还是在开发一个模块的时候， 如果这个时候你需要搞一个工具检查你写的代码、或者
    babel转译、less转译。在使用的时候呢，根本不需要这些，它们只负责编译时调用，这
    个就是 devDependencies

3.关于组建命名的规范：
    文件夹名：文件夹名都是小写
    文件名： ( 一句话：只有主组件是大写开头 )
        通用组件放在src里的components里，文件名全小写。
        主组件放在pages里，文件名大写开头
        主组件的子路由放在pages/xxx/components里，文件名小写
       
    export default {name} / import
        驼峰命名 例如：m-header --> MHeader
        import MHeader from ...
    
    标签全小写
        <m-header></m-header>

4.关于什么时候需要在data里定义属性的问题。
    如过该属性需要上template或者watch，那么就需要定义在data里。

5.jsonp是可以解决跨域、但解决是的同源策略的跨域。
如果后端给接口设置了host和referer，jsonp就会获取失败。
这时候就需要依靠代理了。
var app = express()
var apiRoutes = express.Router()
apiRoutes.get('/getDiscList', function (req, res) {
  var url = 'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'
  axios.get(url, {
    headers: {
      referer: 'https://c.y.qq.com/',
      host: 'c.y.qq.com'
    },
    params: req.query
  }).then((response) => {
    res.json(response.data)
  }).catch((e) => {
    console.log(e)
  })
})

6.slider组件的按钮有点延迟，看着不舒服。

7.better-scroll下一定要被一个整的div包裹

8.fastclick会阻止better-scroll派发的click事件。
（新版本好像没有这个问题了）如果遇到了就在要点击的地方加一个needclick class就行

9.<img src="" width="24" height="24">


10.关于配置路由
    1.定义组件，引进路由

    2.定义路由策略
      routes: [
            {
                path: '/recommend',
                name: 'Recommend',
                component: Recommend
            },
            {
                path: '/singer',
                name: 'Singer',
                component: Singer,
                children: [
                    {
                    // singer/:id
                    path: ':id',
                    component: SingerDetail
                    }
                ]
            }]

    3.确定出口 router-view
    4.在对应的组件下写路由跳转router-link/vm.$router.push，
        (注意：
            跳转必须是同级的，比如上面的，
            只能在pages级别配置跳转/singer /recommend
            而/singer/:id 只能在singer组件下配置跳转)


11.简单状态管理实现
    -创建store，并在主入口挂载进data
        var store = {
            debug: true,
            state: {
                message: 'Hello!'
            },
            setMessageAction (newValue) {
                if (this.debug) console.log('setMessageAction triggered with', newValue)
                this.state.message = newValue
            },
            clearMessageAction () {
                if (this.debug) console.log('clearMessageAction triggered')
                this.state.message = ''
            }
        }

        -main.js
        new Vue({
            data: {
                store
            }
        })
        

    -xxx.vue 组件内接收state
        export default {
            data () {
                return {
                    privateState: {},
                    sharedState: this.$root.$data.store.state
                }
            } 
        }
    
    -xxx.vue
        export default {
            data () {
                return {
                    privateState: {},
                    sharedState: this.$root.$data.store.state
                }
            } 
        }

    如果要修改状态
        this.$root.$data.store.setMessageAction(newValue)


12.关于vuex的映射
    mapMutations/mapActions 映射在methods里
    mapState/mapGetters 映射在computed里


13.页面刷新后vuex里面的数据会清空
    解决办法
        //在页面刷新时将vuex里的信息保存到sessionStorage/localstorage里

        window.addEventListener("beforeunload",()=>{
            sessionStorage.setItem("store",JSON.stringify(this.$store.state))
        })

        //在页面加载时读取sessionStorage/localstorage里的状态信息

        if (sessionStorage.getItem("store") ) {
            this.$store.replaceState(Object.assign({}, this.$store.state,JSON.parse(sessionStorage.getItem("store"))))
        }

14.对象通通大写

15.props中数组默认为空的写法
    data: {
      type: Array,
      // default: []
      default: () => []
    }

16.下次img和image要统一一下。统一写img

17.关于vuex的使用
    首先在src中创建store文件夹
    然后在main.js中注册插件
    import store from './store'
    new Vue({store})

    然后回到store文件夹下创建 
        state.js  存放公共数据
        getters.js  用于对数据的映射
        mutations.js  对数据的简单修改值操作
        mutation-types.js  定义mutations的操作名
        actions.js  批量的mutations操作或者异步操作
        index.js  下面是模版
            import Vue from 'vue'
            import Vuex from 'vuex'
            import * as actions from './actions'
            import * as getters from './getters'
            import state from './state'
            import mutations from './mutations'
            import createLogger from 'vuex/dist/logger'

            Vue.use(Vuex)

            const debug = process.env.NODE_ENV !== 'production'

            export default new Vuex.Store({
                actions,
                getters,
                state,
                mutations,
                strict: debug,
                plugins: debug ? [createLogger()] : []
            })

        当需要使用时
        1.先想想那些数据是需要多个组件共享的，写在state.js里
            const state = { singer:{} , playList:[] } export default state
        
        2.想想要对state作那些操作，然后去mutation-types.js  定义mutations的操作名
            export const SET_SINGER = 'SET_SINGER'
            export const SET_PLAYING_STATE = 'SET_PLAYING_STATE'

        3.在mutations.js里写具体的操作方法
            const mutations = {  
                [types.SET_SINGER] (state, singer) {
                    state.singer = JSON.parse(JSON.stringify(singer))
                },
                [types.SET_PLAYING_STATE] (state, flag) {
                    state.playing = flag
                }
            }

        3.(如果有批量的mutations操作或者异步操作)就要定义在actions.js里
            export const selectPlay = function ({ commit, state }, { list, index }) {
                let playList = [...list]
                commit(types.SET_SEQUENCE_LIST, list)
                if (state.mode === playMode.random) {
                    playList = shuffle(playList)
                    index = _resetIndex(playList, list[index])
                }
                commit(types.SET_PLAYLIST, playList)
                commit(types.SET_CURRENT_INDEX, index)
                commit(types.SET_FULL_SCREEN, true)
                commit(types.SET_PLAYING_STATE, true)
            }

        4.在getter里定义数据的获取
            export const currentSong = (state) => {
                return state.playList[state.currentIndex] || {}
            }
            export const playList = state => state.playList



18.   注意所有引用类型的state，如果传进来的值(假设为list)也是一个引用类型
  那么此时的state就绑定了list的地址
  而vuex的说明是不允许mutate以外的任何地方修改state
  这下就会报 Do not mutate vuex store state outside mutation handlers. 错误
  原因是此时的state是浅克隆，外部如果直接修改list，也就直接修改了state
  这就违背了vuex的原则
  解决办法：
       1.state.list = Object.assign([],list);
       (这里解释一下为什么直接Object.assign([],list)就可以了
         因为此时list是对象数组，proto已经不需要获取了)
         正常情况是Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);


       2.state.list = JSON.parse(JSON.stringify(list))
  比较推荐方法2，方法1的话如果传进来的是数组，那么assign后是一个类数组，
  类数组没有length属性

  ***修正：推荐方法1，方法2弄过之后，对象的proto属性被弄没了。
  至于方法1返回的是一个类数组的问题可以用Array.from解决


19.歌曲封面会卡也没办法，除非设置多个源，然后设置timeout，去重新请求新源。
    timeout的思路：
    <img src="image.gif" id="img" />
    <script>
        var oImg = document.getElementById("img");
        var timer = setTimeOut(function(){
        alert("加载超时！请重试！");
        },5000);
        oImg.onload = function () {
            clearTimeOut(timer);
            timer = null;
        }
    </script>

20.对随机播放方面做了点改进，下一首的时候index取一个除了自己之外的随机数，
然后prev允许返回一次。


21.重新整理一下深克隆的两个方法
    方法一  JSON.parse(JSON.stringify(obj));
        (缺点：它不能克隆proto, 也就是方法, 这个缺点很致命, 也就是说
        当遇到带方法的对象, 或者对象数组都不可以用这个)
        实例
            let o1 = { a: 0 , b: { c: 0}};
            let cloneO1 = JSON.parse(JSON.stringify(o1));

    方法二 数组 Object.assign([], array);
               对象 Object.assign(Object.create(Object.getPrototypeOf(obj), obj);
                    (Object.assign({}, array)这个是错的，它克隆不了proto)
        
        (完美克隆)
        
        另外assign出来的都是对象、或者类数组，如果想转换成数组，
        还需要Array.from



22.转译、编译url（防止中文乱码）
    encodeURL()  encodeURIComponent() 
    decodeURI()  decodeURIComponent()

    encodeURL/de~ 和 encodeURIComponent/de~的区别是
    具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的


23.Math.max其实是求最小值的，Math.min是求最大值的
    Math.max(0, 200) 最小值也要大于0
    Math.min(0 , 200) 最大值不能超过0


24.移动端touchstart touchmove touchend写法样例
    在created中创建 this.touch = {}
        _onTouchStart (e) {
            this.touch.init = true
            const touch = e.touches[0]
            this.touch.startX = touch.pageX
            this.touch.startY = touch.pageY
        },
        _onTouchMove (e) {
            if (!this.touch.init) { return }
            const touch = e.touches[0]
            const deltaX = touch.pageX - this.touch.startX
            const deltaY = touch.pageY - this.touch.startY
            纵向滚动
            if (Math.abs(deltaY) > Math.abs(deltaX)) {
                ---
            }
            横向滚动
            if (Math.abs(deltaY) < Math.abs(deltaX)) {
                ---
            }
        },
        _onTouchEnd (e) {
            if (!this.touch.init) { return }
            this.touch.init = false
        },



24.歌词切换还有点问题（单击不会触发纵向滚动返回，然后在touchend里又存在
touch.percent缓存，所以会出现单击切换）这个问题不大，不能算个bug
25.切换播放模式会重头播放（loop的问题）解决

播放器新添功能
1.完全随机播放（完成）
2.song-list组件显示正在播放歌曲的图标（完成）
3.拉歌词调进度（完成）
    思路
        1.监听touchstart事件，标记将要手动滚动onScroll = true，然后让lyric停止播放。
        2.监听touchmove事件，让手动操作滚动时audio停止播放
        2.再监听touchend事件，标记手动滚动结束onScroll = false，如果audio
        正在播放则让lyric seek到currenttime。否则只记录currenttime，让togglePlay
        去seek

        3.然后监听scroll事件，判断是否是手动滚动(为了防止和自动播放歌词的滚动冲突)，
        根据getBoundingClientRect找到离timeline最近的那一条歌词，
        返回index，记录currenttime

4.调节音量 （完成）


26.mixins写法
    export const playlistMixin = {
        computed: {
            ...mapGetters(['playlist'])
        },
        mounted () {
            this.handlePlaylist(this.playlist)
        },
        activated () {
            this.handlePlaylist(this.playlist)
        },
        watch: {
            playlist (newVal) {
            this.handlePlaylist(newVal)
            }
        },
        methods: {
            # 防止混入的组件中没有写handlePlaylist函数
            handlePlaylist () {
                throw new Error('component must implement handlePlaylist method')
            }
            # 这个函数是必须要写的，虽然要定义的功能要在对应的组件中进行重写。
            # 但为了防止混入的组件中没有写handlePlaylist函数，这里还是必须要有的
        }
    }

    混入规则
    1.mixins在和组件的数据发生冲突时以组件数据优先。
    2.同名钩子函数将混合为一个数组，因此都将被调用。
        另外，混入对象的钩子将在组件自身钩子之前调用。

    作用：可以理解为提取组件之间同一个功能的公共部分代码


27. touch-action: none;
    确定任何触摸事件都不会产生默认行为，但是 touch 事件照样触发。
    为了照顾passive

28.组件传prop，watch监听不到第一次传值。
    解决办法
        percent: {
            immediate: true,
            # deep: false, 深度监听
            handler (percent) {
                if (percent >= 0 && !this.touch.init) {
                const barWidth = this.$refs.progressBar.clientWidth - PROGRESS_BTN_WIDTH
                const offsetWidth = percent * barWidth
                this._offset(offsetWidth)
                }
            }
        }
    使用这个也需要注意一下，因为是立即监听的。要确保handler中使用的东西都存在

29.computed是要与响应式数据配合的
   <!-- 计算属性 vs 侦听属性 -->
    (computed)计算属性的原理就是创建一个元素，然后给他设置getter和setter(默认只有setter)，
    然后给它的getter依赖响应式的数据。根据响应式的数据的改变，计算自身属性。
    
    (watch) 监听属性指的是监听一个值的变动，算是一个监听器。

    当数据需要（随着其它数据变动而变动）时，应使用计算属性 
    当需要（监听数据本身的变化）时，应使用监听属性


30.发现一个bug 歌词还在加载的时候，拉动下面进度条。拉动滚动条后触发seek，然而在歌词加载后又会再次play，然后二者就会冲突了

        解决办法
            1.把play全部改成seek
            2.在getLyric创建loadedLyric标记变量
            3.如果没有loadedLyric，拉动进度条不触发seek。


31.规范一下实例属性写的顺序
        props
        components
        mixins
        filter
        data
        computed
        watch
        周期函数
        method
    
32.arr.splice 和 str/arr.slice
原来arr也有slice方法

33.search-box.vue
     <input type="text" class="box" :placeholder="placeholder" 
     v-model="query">

    _setQuery (q) {
      this.query = q
    }

    search.vue
    _onClickAddQuery (k) {
      this.$refs.searchBox._setQuery(k)
    }
    
34.再次强调计算属性不能传参

35.规范一下方法的书写，如果是自定义方法就加_
( 如果是类的或者派出去的借口或者styleclass则不用加_ )
如果是监听事件的方法就加_on

36.bug onTouchMiddle和middleClick冲突了
    解决办法
        设置一个标记变量在onscroll里，然后
        if (e.touches[0].pageY !== this.middleTouch.startY) {
            this.onScroll = true
        }    

37.不知道为什么在suggest的
    normalize中加一层
       _getMusic(item.songmid).then(res => {
              if (res.code === ERR_OK) {
                const svkey = res.data.items
                const songvkey = svkey[0].vkey
                const _Song = createSong(item, songvkey)
                ret.push(_Song)
              }
       }
    this.result和新数据就无法组合。
    
    更新解释：console.log(nResult)  ---这时候有个蓝色图标提示：
    value below was evaluated just now
    它解释是：在此处看到的值并不是console.log执行时候的值，
    也就是说现在看到的值是不真实的。出现这种情况的原因是在这里出现了双重异步代码

    解决办法：使用监听器。监听它的返回值，然后再让result cancat


38. bug：上拉加载是会和下拉加载碰撞的，因为maxScrollY是最大的滚动距离。
      下来加载更新数据时，如果当时数据为空，那么maxScrollY就是0，肯定会触发
      上拉加载。

      解决办法：设置标志变量，上拉加载和下拉加载不能同时使用
      better-scroll已经为我们提供了判断movingDirectionY就行了
      movingDirectionY = 1 代表向上滑
      movingDirectionY = -1 代表向下滑

39.           console.log(nResult)  ---这时候有个蓝色图标提示：value below was evaluated just now
          解释是：在此处看到的值并不是console.log执行时候的值，也就是说现在看到的值是不真实的
          出现这种情况的原因是在这里出现了双重异步代码

          解决办法：使用监听器。监听result


40.await无法在forEach中用，因为forEach有自己的上下文，且没有被async修饰
解决办法，改用for of/in for